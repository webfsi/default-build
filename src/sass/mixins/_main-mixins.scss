$rem-base: $rem-default-font-size;

@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// Використання strip-unit для перетворення 10px в 10

@function convert-to-rem($value, $base-value: $rem-base) {
	$value: strip-unit($value) / strip-unit($base-value) * 1rem;

	@if ($value == 0) {
		$value: 0;
	}
	// Turn 0rem into 0
	@return $value;
}

// convert-to-rem = Припустимо, ми хочемо конвертувати 24px в rem
// $font-size: convert-to-rem(24px); // Використовуємо функцію convert-to-rem
// $font-size буде 1.5rem, оскільки 24px / 16px = 1.5

@function rem-calc($values, $base-value: $rem-base) {
	$max: length($values);

	@if $max == 1 {
		@return convert-to-rem(nth($values, 1), $base-value);
	}
	$remValues: ();

	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}

	@return $remValues;
}

// // Припустимо, ми хочемо конвертувати кілька значень відступів з px в rem
// $padding-values: rem-calc(10px 20px 30px 40px);
// // Використання отриманих значень для встановлення відступів
// .element {
//   padding: $padding-values; // Відступи будуть встановлені як 0.625rem 1.25rem 1.875rem 2.5rem
// }

@function vh($fraction) {
	$percent: $fraction * 100vh;

	@return $percent;
}

@function vw($fraction) {
	$percent: $fraction * 100vw;

	@return $percent;
}

// // Встановлення висоти секції як 50% від висоти вікна перегляду
// .section {
//   height: vh(0.5); // Використання функції vh для обчислення 50% висоти вікна
// }

// // Встановлення ширини контейнера як 80% від ширини вікна перегляду
// .container {
//   width: vw(0.8); // Використання функції vw для обчислення 80% ширини вікна
// }


@mixin target-ie11 {
	@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
		@content;
	}
}

@mixin target-edge {
	@supports (-ms-ime-align: auto) {
		@content;
	}
}

@mixin target-safari {
	@media not all and (min-resolution: .001dpcm) {
		@content;
	}
}
// @include target-ie11 {
//   // Стилі тільки для IE11
//   .element {
//     // Ваші стилі тут
//   }
// }
// @include target-edge {
//   // Стилі тільки для Edge
//   .element {
//     // Ваші стилі тут
//   }
// }
// @include target-safari {
//   // Стилі тільки для Safari
//   .element {
//     // Ваші стилі тут
//   }
// }

// /*
//   This mixin can be used to set the object-fit:
//   @include object-fit(contain);

//   or object-fit and object-position:
//   @include object-fit(cover, top);
// */
@mixin object-fit($fit: fill, $position: null) {
	-o-object-fit: $fit;
	object-fit: $fit;

	@if $position {
		-o-object-position: $position;
		object-position: $position;
		font-family: "object-fit: #{$fit}; object-position: #{$position}";
	}

	@else {
		font-family: "object-fit: #{$fit}";
	}
}

@mixin absolute-full-screen {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

@mixin absolute-background {
	@include absolute-full-screen;

	img,
	svg,
	video {
		width: 100%;
		height: 100%;

		@include object-fit(cover);
	}
}

@mixin absolute-pseudo-full {
	content: "";

	@include absolute-full-screen;
}

@mixin aspect-ratio($arg: 1, $arg2: null) {
	position: relative;

	&::before {
		display: block;
		width: 100%;

		@if $arg2 == null {
			@if unit($arg) == "%" {
				padding-top: $arg;
			}

			@else {
				padding-top: percentage(1/$arg);
			}
		}

		@else {
			padding-top: percentage(strip-unit($arg)/strip-unit($arg2));
		}

		content: "";
	}
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
	position: $pos;
	display: $display;
	content: $content;
}

@mixin anim($param: all, $dur: .2s, $type: ease-in-out, $delay: 0s) {
	transition: $param $dur $type $delay;
}

@mixin fullheight() {
	height: 100vh;
	height: calc(var(--vh, 1vh) * 100);
}

@mixin hover {
	@media not all and (hover: none) {

		&:hover {
			@content;
		}
	}
}
